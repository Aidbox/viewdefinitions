{"version":3,"sources":["suitkin/components/dropdown/model.cljc"],"mappings":";AAIA,4DAAA,5DAAMA,gIAAyBC;AAA/B,AACE,IAAMC,eAAa,iEAAA,jEAACC,mDAAUF;IACxBG,QAAM,AAACC,4CAAI,WAAKE;AAAL,AAAA,kBAAAD;AAAA,AAAmB,OAACE,+BAAc,0BAAAF,1BAACG,4CAAkBF;;GAAcL;AADpF,AAEE,OAACQ,8CAAMC,qBAAWP;;AAEtB,2DAAA,3DAACQ,oOAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;SAAT,AAAAF,4CAAAD,WAAA,IAAA,hEAAWI;AAAX,AACE,OAACC,mBAAQ,kDAAA,mFAAA,rIAACC,+CAAOJ,+MAAYE;;AAEhC,yDAAA,zDAACG,+KAEA,cAAAC,HAAKN;AAAL,AAAA,IAAAO,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAASN;SAAT,AAAAF,4CAAAQ,WAAA,IAAA,hEAAWL;AAAX,AACE,6BAAA,mFAAA,oIAAA,7OAACM,mBAASR,+MAAYE;;AAEzB,yDAAA,zDAACG,iLAEA,cAAAI,HAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DAAST;SAAT,AAAAF,4CAAAW,WAAA,IAAA,hEAAWR;AAAX,AACE,6BAAA,mFAAA,oIAAA,7OAACM,mBAASR,+MAAYE","names":["suitkin.components.dropdown.model/build-package-filter-fn","search-string","string-parts","clojure.string.split","preds","cljs.core.map","p1__47145#","string-part","clojure.string/includes?","clojure.string/lower-case","cljs.core.apply","cljs.core/every-pred","re_frame.core.reg_sub","p__47158","vec__47159","cljs.core.nth","db","_","id","cljs.core/boolean","cljs.core.get_in","re_frame.core.reg_event_db","p__47173","vec__47174","cljs.core/assoc-in","p__47180","vec__47181"],"sourcesContent":["(ns suitkin.components.dropdown.model\n  (:require [clojure.string :as str]\n            [re-frame.core :as rf]))\n\n(defn build-package-filter-fn [search-string]\n  (let [string-parts (str/split search-string #\" \")\n        preds (map (fn [string-part] #(str/includes? (str/lower-case %) string-part)) string-parts)]\n    (apply every-pred preds)))\n\n(rf/reg-sub\n ::open?\n (fn [db [_ id]]\n   (boolean (get-in db [::state id]))))\n\n(rf/reg-event-db\n ::open\n (fn [db [_ id]]\n   (assoc-in db [::state id] true)))\n\n(rf/reg-event-db\n ::close\n (fn [db [_ id]]\n   (assoc-in db [::state id] false)))\n"]}