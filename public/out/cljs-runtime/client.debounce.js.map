{"version":3,"sources":["client/debounce.cljs"],"mappings":";AAGA,sBAAA,tBAAMA;AAAN,AAAa,OAAU,KAAAC;;AAEvB,AAAKC,kCAAgB,6CAAA,7CAACC;AAEtB,6CAAA,qDAAAC,lGAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAA0CI;aAA1C,AAAAF,4CAAAF,eAAA,pEAA8CK;YAA9C,AAAAH,4CAAAF,eAAA,nEAAqDM;oBAArD,AAAAJ,4CAAAF,eAAA,3EAA2DO;AAA3D,AACE,GAAM,AAACC,6CAAED,cAAc,4CAAA,AAAAE,5CAACP,4DAAKL,iCAAgBO;AAA7C,AACE,OAACM,uBAASJ;;AADZ;;;AAGF,iCAAA,yCAAAK,1EAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;eAAAA,XAAyCG;YAAzC,AAAAb,4CAAAU,eAAA,nEAA8BE;AAA9B,AACE,OAACE,WACA;AAAA,AAAO,OAACb,2CAA2BY;GACnC,iBAAAE,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAA;;;;AAEH,oCAAA,pCAAMC,gFAAmBH;AAAzB,AACE,IAAMI,KAAG,AAACxB;AAAV,AACE,AAACyB,mDAAMvB,gCAAgBwB,gBAAM,AAAA,kFAAMN,UAAUI;;AAC7C,OAACN,+BAAe,uDAAA,vDAACS,8CAAMP,gFAAwBI;;AAEnD,qBAAA,rBAACI,qGAA0BL;AAE3B,yDAAA,zDAACM,yIAEA,eAAAC,JAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAUG;UAAV,AAAAF,4CAAAD,WAAA,IAAA,jEAAYI;AAAZ,AAAA,kDAAA,gFACsBA","names":["client.debounce/now","js/Date","client.debounce/registered-keys","cljs.core.atom","p__46082","map__46083","cljs.core/--destructure-map","cljs.core.get","client.debounce/dispatch-if-not-superceded","key","_delay","event","time-received","cljs.core._EQ_","cljs.core/deref","re-frame.core/dispatch","p__46089","map__46090","client.debounce/dispatch-later","delay","debounce","js/setTimeout","or__5045__auto__","client.debounce/dispatch-debounce","ts","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.assoc","re-frame.core/reg-fx","re_frame.core.reg_event_fx","p__46093","vec__46094","cljs.core.nth","_fx","_","deb"],"sourcesContent":["(ns client.debounce\n  (:require [re-frame.core  :refer [reg-fx dispatch] :as rf]))\n\n(defn now [] (.getTime (js/Date.)))\n\n(def registered-keys (atom nil))\n\n(defn dispatch-if-not-superceded [{:keys [key _delay event time-received]}]\n  (when (= time-received (get @registered-keys key))\n    (dispatch event)))\n\n(defn dispatch-later [{:keys [delay] :as debounce}]\n  (js/setTimeout\n   (fn [] (dispatch-if-not-superceded debounce))\n   (or delay 300)))\n\n(defn dispatch-debounce [debounce]\n  (let [ts (now)]\n    (swap! registered-keys assoc (:key debounce) ts)\n    (dispatch-later (assoc debounce :time-received ts))))\n\n(reg-fx :dispatch-debounce dispatch-debounce)\n\n(rf/reg-event-fx\n :dispatch-debounce\n (fn [_fx [_ deb]]\n   {:dispatch-debounce deb}))\n"]}