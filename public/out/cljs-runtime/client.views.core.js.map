{"version":3,"sources":["client/views/core.cljs"],"mappings":";AAYA,+BAAA,/BAAMA;AAAN,AACE,YAAA,AAAAC,RAAMC,wBAAO,sDAAA,mFAAA,zIAACC;AAAd,AAAA,0FAAA,mDAAA,sGAAA,2CAAA,mEAAA,iBAAA,oJAAA,+DAAA,KAAA,kKAAA,sDAAA,mFAAA,mDAAA,2CAAA,mJAAA,uGAAA,2CAAA,kDAAA,4BAAA,oJAAA,sDAAA,mCAAA,n1CAEIC,0MAEgB,uOAEA,sXAGY,yBAAA,zBAACC,kLAC7BC,qMAEkB,kPAIG,WAAKC;AAAL,AAAQ,8BAAA,mFAAA,1GAACC;WAhBlC,yBAkBG,yBAAA,AAAA,mFAAA,mDAAA,yBAAA,tKAAMN;;AAGX,AAAAO,iEAAA,iEAAA;AAAA,AAAA,0FAAyCT;;AAEzC,+BAAA,/BAAMU;AAAN,AACE,IAAMC,eAAa,sDAAA,mFAAA,zIAACR;AAApB,AAAA,+GAAA,AAAAF,rBACGQ,qCAAeE","names":["client.views.core/home-panel","cljs.core/deref","value","re_frame.core.subscribe","suitkin.core/input","suitkin.utils/public-src","suitkin.core/button","e","re-frame.core/dispatch","client.routes/panels","client.views.core/main-panel","active-panel"],"sourcesContent":["(ns client.views.core\n  (:require\n   [re-frame.core :as re-frame :refer [dispatch subscribe]]\n   [client.routes :as routes]\n   [suitkin.core :as ui]\n   [client.events :as e]\n   [client.subs :as s]\n   [suitkin.utils :as su]\n   #_[suitkin.button :as button]\n   )\n  (:require-macros [stylo.core :refer [c]]))\n\n(defn home-panel []\n  (let [value @(subscribe [::s/value])]\n    [:div\n     [ui/input\n      {:placeholder   \"suitkin search\"\n       :class         (c :w-full)\n       :autoFocus     true\n       :class-wrapper (c {:width \"100% !important\"})\n       #_#_:on-change     (fn [event]\n                            (dispatch [::someevent]))\n       :s/left        [:img {:src (su/public-src \"/suitkin/img/icon/ic-search-16.svg\")}]}]\n     [ui/button {:id \"ig-create-valueset-button\"\n                 #_\" not working\"\n                 :class (c {:color \"#DF351F\"})\n                 :s/icon   \"/suitkin/img/icon/ic-plus-16.svg\"\n                 #_#_:s/loading? (:valueset-creation-in-progress? data)\n                 #_#_:disabled (seq (:monaco-markers data))\n                 :on-click (fn [e] (dispatch [::e/add-value]))}\n      \"suitkin button\"]\n     (when value\n       [:div \"button clicked\"])]))\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::s/active-panel])]\n    [routes/panels @active-panel]))\n"]}